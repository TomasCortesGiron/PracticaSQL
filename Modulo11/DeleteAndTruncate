--Para crear la tabla que nos va a ayudar a desarrollar el ejercicio--
--This is the prerequsite: --
create table toys (
  toy_name varchar2(30),
  price    number(4, 2)
);

insert into toys values ('Baby Turtle', 0.01);
insert into toys values ('Miss Snuggles', 0.51);
insert into toys values ('Cuteasaurus', 10.01);
insert into toys values ('Sir Stripypants', 14.03);
insert into toys values ('Purple Ninja', 14.22);

commit;

--In this case, we erase all the information in the table:  --
delete from toys;

--Use a where clause for delete rows:  --
delete toys where price < 1;

select * from toys;

rollback;

select * from toys;

-- TRUNCATE: --
--With Truncate, we can remove all the rows --
select * from toys;

truncate table toys;

select * from toys;

rollback;

select * from toys;

--            SOFT DELETES        --
--In the next case, we go to create a column with values for a Soft delete
alter table toys add is_deleted varchar2(1) default 'N';

--We adding new rows, ensure this value is N (No) --
delete toys;

insert into toys values ('Baby Turtle', 0.01, 'N');
insert into toys values ('Miss Snuggles', 0.51, 'N');
insert into toys values ('Cuteasaurus', 10.01, 'N');
insert into toys values ('Sir Stripypants', 14.03, 'N');
insert into toys values ('Purple Ninja', 14.22, 'N');

select * from toys;

commit;

--Now, to "delete" rows, you run an update. This sets the delete flag to Yes.
--(We are changed the "is_deleted" value in Cuteasaurus  N->Y )
update toys
set    is_deleted = 'Y'
where  toy_name = 'Cuteasaurus';

select * from toys;

--But now you need to filter out the "deleted" values in most queries. 
--This makes your code more complicated. To get only active rows, you need to add a where clause to all these queries. For example:
select * from toys
where is_deleted = 'N';

--Luckily Oracle Database offers many ways to simplify this, including:
--   -> Using views
--   -> Virtual Private Database (VPD)
--   -> In-Database Archiving.

--   ->Using views:
create or replace view active_toys as
  select * from toys
  where is_deleted = 'N';

select * from active_toys;

--   ->Using In-Database archiving:
-- Do this with the following command:  --
alter table toys row archival;

--You then "delete" rows by setting ora_archive_state to any value other than zero. For example:
update toys 
set    ora_archive_state = '1'
where  toy_name = 'Baby Turtle';

select * from toys;

-- You control which rows are visible in the session. If you set the row archival visibility to all, you see everything:
alter session set row archival visibility = all;

select * from toys;

-- To auto-filter out the deleted rows, set the visibility to active:
alter session set row archival visibility = active;

select * from toys;

--End 


